{% extends 'base.html.twig' %}
{% set titlepage= "Gestion des Structures " %}
{% block style %}
    <link href="{{ asset('template/plugins/bower_components/datatables/jquery.dataTables.min.css') }}" rel="stylesheet">
    <link href="{{ asset('template/plugins/bower_components/morrisjs/morris.css') }}" rel="stylesheet">
    <link href="https://cdn.datatables.net/buttons/1.2.2/css/buttons.dataTables.min.css" rel="stylesheet" type="text/css" />
    <link href="{{ asset('template/plugins/bower_components/footable/css/footable.core.css') }}" rel="stylesheet">
    <link href="{{ asset('template/plugins/bower_components/bootstrap-select/bootstrap-select.min.css') }}" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gojs/2.1.5/go.js" ></script>
    <script src="https://cdn.jsdelivr.net/npm/gojs/release/go.js" ></script>

    <script id="code">
        function init() {
            if (window.goSamples) goSamples();  // init for these samples -- you don't need to call this
            var $ = go.GraphObject.make;  // for conciseness in defining templates
            myDiagram =
                $(go.Diagram, "myDiagramDiv", // must be the ID or reference to div
                    {
                        maxSelectionCount: 1, // users can select only one part at a time
                        validCycle: go.Diagram.CycleDestinationTree, // make sure users can only create trees
                        "clickCreatingTool.archetypeNodeData": { // allow double-click in background to create a new node
                            name: "(new person)",
                            title: "",
                            comments: ""
                        },
                        "clickCreatingTool.insertPart": function(loc) {  // scroll to the new node
                            var node = go.ClickCreatingTool.prototype.insertPart.call(this, loc);
                            if (node !== null) {
                                this.diagram.select(node);
                                this.diagram.commandHandler.scrollToPart(node);
                                this.diagram.commandHandler.editTextBlock(node.findObject("NAMETB"));
                            }
                            return node;
                        },
                        layout:
                            $(go.TreeLayout,
                                {
                                    treeStyle: go.TreeLayout.StyleLastParents,
                                    arrangement: go.TreeLayout.ArrangementHorizontal,
                                    // properties for most of the tree:
                                    angle: 90,
                                    layerSpacing: 35,
                                    // properties for the "last parents":
                                    alternateAngle: 90,
                                    alternateLayerSpacing: 35,
                                    alternateAlignment: go.TreeLayout.AlignmentBus,
                                    alternateNodeSpacing: 20
                                }),
                        "undoManager.isEnabled": true // enable undo & redo
                    });
            // when the document is modified, add a "*" to the title and enable the "Save" button
            myDiagram.addDiagramListener("Modified", function(e) {
                var button = document.getElementById("SaveButton");
                if (button) button.disabled = !myDiagram.isModified;
                var idx = document.title.indexOf("*");
                if (myDiagram.isModified) {
                    if (idx < 0) document.title += "*";
                } else {
                    if (idx >= 0) document.title = document.title.substr(0, idx);
                }
            });
            // manage boss info manually when a node or link is deleted from the diagram
            myDiagram.addDiagramListener("SelectionDeleting", function(e) {
                var part = e.subject.first(); // e.subject is the myDiagram.selection collection,
                // so we'll get the first since we know we only have one selection
                myDiagram.startTransaction("clear boss");
                if (part instanceof go.Node) {
                    var it = part.findTreeChildrenNodes(); // find all child nodes
                    while (it.next()) { // now iterate through them and clear out the boss information
                        var child = it.value;
                        var bossText = child.findObject("boss"); // since the boss TextBlock is named, we can access it by name
                        if (bossText === null) return;
                        bossText.text = "";
                    }
                } else if (part instanceof go.Link) {
                    var child = part.toNode;
                    var bossText = child.findObject("boss"); // since the boss TextBlock is named, we can access it by name
                    if (bossText === null) return;
                    bossText.text = "";
                }
                myDiagram.commitTransaction("clear boss");
            });
            var levelColors = ["#AC193D", "#2672EC", "#8C0095", "#5133AB",
                "#008299", "#D24726", "#008A00", "#094AB2"];
            // override TreeLayout.commitNodes to also modify the background brush based on the tree depth level
            myDiagram.layout.commitNodes = function() {
                go.TreeLayout.prototype.commitNodes.call(myDiagram.layout);  // do the standard behavior
                // then go through all of the vertexes and set their corresponding node's Shape.fill
                // to a brush dependent on the TreeVertex.level value
                myDiagram.layout.network.vertexes.each(function(v) {
                    if (v.node) {
                        var level = v.level % (levelColors.length);
                        var color = levelColors[level];
                        var shape = v.node.findObject("SHAPE");
                        if (shape) shape.stroke = $(go.Brush, "Linear", { 0: color, 1: go.Brush.lightenBy(color, 0.05), start: go.Spot.Left, end: go.Spot.Right });
                    }
                });
            };
            // when a node is double-clicked, add a child to it
            function nodeDoubleClick(e, obj) {
                var clicked = obj.part;
                if (clicked !== null) {
                    var thisemp = clicked.data;
                    myDiagram.startTransaction("add employee");
                    var newemp = {
                        name: "(new person)",
                        title: "",
                        comments: "",
                        parent: thisemp.key
                    };
                    myDiagram.model.addNodeData(newemp);
                    myDiagram.commitTransaction("add employee");
                }
            }
            // this is used to determine feedback during drags
            function mayWorkFor(node1, node2) {
                if (!(node1 instanceof go.Node)) return false;  // must be a Node
                if (node1 === node2) return false;  // cannot work for yourself
                if (node2.isInTreeOf(node1)) return false;  // cannot work for someone who works for you
                return true;
            }
            // This function provides a common style for most of the TextBlocks.
            // Some of these values may be overridden in a particular TextBlock.
            function textStyle() {
                return { font: "9pt  Segoe UI,sans-serif", stroke: "white" };
            }
            // This converter is used by the Picture.
            function findHeadShot(key) {
                if (key < 0 || key > 16) return "images/HSnopic.jpg"; // There are only 16 images on the server
                return "images/HS" + key + ".jpg"
            }
            // define the Node template
            myDiagram.nodeTemplate =
                $(go.Node, "Auto",
                    { doubleClick: nodeDoubleClick },
                    { // handle dragging a Node onto a Node to (maybe) change the reporting relationship
                        mouseDragEnter: function(e, node, prev) {
                            var diagram = node.diagram;
                            var selnode = diagram.selection.first();
                            if (!mayWorkFor(selnode, node)) return;
                            var shape = node.findObject("SHAPE");
                            if (shape) {
                                shape._prevFill = shape.fill;  // remember the original brush
                                shape.fill = "darkred";
                            }
                        },
                        mouseDragLeave: function(e, node, next) {
                            var shape = node.findObject("SHAPE");
                            if (shape && shape._prevFill) {
                                shape.fill = shape._prevFill;  // restore the original brush
                            }
                        },
                        mouseDrop: function(e, node) {
                            var diagram = node.diagram;
                            var selnode = diagram.selection.first();  // assume just one Node in selection
                            if (mayWorkFor(selnode, node)) {
                                // find any existing link into the selected node
                                var link = selnode.findTreeParentLink();
                                if (link !== null) {  // reconnect any existing link
                                    link.fromNode = node;
                                } else {  // else create a new link
                                    diagram.toolManager.linkingTool.insertLink(node, node.port, selnode, selnode.port);
                                }
                            }
                        }
                    },
                    // for sorting, have the Node.text be the data.name
                    new go.Binding("text", "name"),
                    // bind the Part.layerName to control the Node's layer depending on whether it isSelected
                    new go.Binding("layerName", "isSelected", function(sel) { return sel ? "Foreground" : ""; }).ofObject(),
                    // define the node's outer shape
                    $(go.Shape, "Rectangle",
                        {
                            name: "SHAPE", fill: "#333333", stroke: 'white', strokeWidth: 3.5,
                            // set the port properties:
                            portId: "", fromLinkable: true, toLinkable: true, cursor: "pointer"
                        }),
                    $(go.Panel, "Horizontal",
                        $(go.Picture,
                            {
                                name: "Picture",
                                desiredSize: new go.Size(70, 70),
                                margin: 1.5,
                            },
                            new go.Binding("source", "key", findHeadShot)),
                        // define the panel where the text will appear
                        $(go.Panel, "Table",
                            {
                                minSize: new go.Size(130, NaN),
                                maxSize: new go.Size(150, NaN),
                                margin: new go.Margin(6, 10, 0, 6),
                                defaultAlignment: go.Spot.Left
                            },
                            $(go.RowColumnDefinition, { column: 2, width: 4 }),
                            $(go.TextBlock, textStyle(),  // the name
                                {
                                    row: 0, column: 0, columnSpan: 5,
                                    font: "12pt Segoe UI,sans-serif",
                                    editable: true, isMultiline: false,
                                    minSize: new go.Size(10, 16)
                                },
                                new go.Binding("text", "name").makeTwoWay()),
                            $(go.TextBlock, "Nom: ", textStyle(),
                                { row: 1, column: 0 }),
                            $(go.TextBlock, textStyle(),
                                {
                                    row: 1, column: 1, columnSpan: 4,
                                    editable: true, isMultiline: false,
                                    minSize: new go.Size(10, 14),
                                    margin: new go.Margin(0, 0, 0, 3)
                                },
                                new go.Binding("text", "title").makeTwoWay()),
                            $(go.TextBlock, textStyle(),
                                { row: 2, column: 0 },
                                new go.Binding("text", "key", function(v) { return "ID: " + v; })),
                            $(go.TextBlock, textStyle(),
                                { name: "boss", row: 2, column: 3, }, // we include a name so we can access this TextBlock when deleting Nodes/Links
                                new go.Binding("text", "parent", function(v) { return "Boss: " + v; })),
                            $(go.TextBlock, textStyle(),  // the comments
                                {
                                    row: 3, column: 0, columnSpan: 5,
                                    font: "italic 9pt sans-serif",
                                    wrap: go.TextBlock.WrapFit,
                                    editable: true,  // by default newlines are allowed
                                    minSize: new go.Size(10, 14)
                                },
                                new go.Binding("text", "comments").makeTwoWay())
                        )  // end Table Panel
                    ) // end Horizontal Panel
                );  // end Node
            // the context menu allows users to make a position vacant,
            // remove a role and reassign the subtree, or remove a department
            myDiagram.nodeTemplate.contextMenu =
                $("ContextMenu",
                    $("ContextMenuButton",
                        $(go.TextBlock, "Vacate Position"),
                        {
                            click: function(e, obj) {
                                var node = obj.part.adornedPart;
                                if (node !== null) {
                                    var thisemp = node.data;
                                    myDiagram.startTransaction("vacate");
                                    // update the key, name, and comments
                                    myDiagram.model.setDataProperty(thisemp, "name", "(Vacant)");
                                    myDiagram.model.setDataProperty(thisemp, "comments", "");
                                    myDiagram.commitTransaction("vacate");
                                }
                            }
                        }
                    ),
                    $("ContextMenuButton",
                        $(go.TextBlock, "Remove Role"),
                        {
                            click: function(e, obj) {
                                // reparent the subtree to this node's boss, then remove the node
                                var node = obj.part.adornedPart;
                                if (node !== null) {
                                    myDiagram.startTransaction("reparent remove");
                                    var chl = node.findTreeChildrenNodes();
                                    // iterate through the children and set their parent key to our selected node's parent key
                                    while (chl.next()) {
                                        var emp = chl.value;
                                        myDiagram.model.setParentKeyForNodeData(emp.data, node.findTreeParentNode().data.key);
                                    }
                                    // and now remove the selected node itself
                                    myDiagram.model.removeNodeData(node.data);
                                    myDiagram.commitTransaction("reparent remove");
                                }
                            }
                        }
                    ),
                    $("ContextMenuButton",
                        $(go.TextBlock, "Remove Department"),
                        {
                            click: function(e, obj) {
                                // remove the whole subtree, including the node itself
                                var node = obj.part.adornedPart;
                                if (node !== null) {
                                    myDiagram.startTransaction("remove dept");
                                    myDiagram.removeParts(node.findTreeParts());
                                    myDiagram.commitTransaction("remove dept");
                                }
                            }
                        }
                    )
                );
            // define the Link template
            myDiagram.linkTemplate =
                $(go.Link, go.Link.Orthogonal,
                    { corner: 5, relinkableFrom: true, relinkableTo: true },
                    $(go.Shape, { strokeWidth: 1.5, stroke: "#353535" }));  // the link shape
            // read in the JSON-format data from the "mySavedModel" element
            load();
            // support editing the properties of the selected person in HTML
            if (window.Inspector) myInspector = new Inspector("myInspector", myDiagram,
                {
                    properties: {
                        "key": { readOnly: true },
                        "comments": {}
                    }
                });
            // Setup zoom to fit button
            document.getElementById('zoomToFit').addEventListener('click', function() {
                myDiagram.commandHandler.zoomToFit();
            });
            document.getElementById('centerRoot').addEventListener('click', function() {
                myDiagram.scale = 1;
                myDiagram.commandHandler.scrollToPart(myDiagram.findNodeForKey(1));
            });
        } // end init
        // Show the diagram's model in JSON format
        function save() {
            document.getElementById("mySavedModel").value = myDiagram.model.toJson();
            myDiagram.isModified = false;
        }
        function load() {
            myDiagram.model = go.Model.fromJson(document.getElementById("mySavedModel").value);
            // make sure new data keys are unique positive integers
            var lastkey = 1;
            myDiagram.model.makeUniqueKeyFunction = function(model, data) {
                var k = data.key || lastkey;
                while (model.findNodeDataForKey(k)) k++;
                data.key = lastkey = k;
                return k;
            };
        }
    </script>
{% endblock %}
{% block body %}
    <div class="row bg-title">
        <div class="col-lg-3 col-md-4 col-sm-4 col-xs-12">
            <h4 class="page-title"> {{ titlepage }}</h4>
        </div>
        <div class="col-lg-9 col-sm-8 col-md-8 col-xs-12">
            <a href="{{ path('structure_new') }}" data-toggle="modal" data-target="#responsive-modal"  class="btn btn-danger pull-right m-l-20 btn-rounded btn-outline hidden-xs hidden-sm waves-effect waves-light">
                Ajouter
            </a>
            <ol class="breadcrumb">
                <li><a href="#">Systéme d'Information de Suivi Evaluation et Managériale (SISEM) </a></li>
                <li class="active">Tableau de bord</li>
            </ol>
        </div>
    </div>

    <!--DEBUT Organigramme nouveau model avec GoJS-->
    <div class="row">
        <div class="col-sm-12">
            <div class="white-box">
                <h3 class="box-title m-b-0">Organigramme</h3>
                <br>
                <div id="sample">
                    <p class="pull-right">
                        <button class="btn btn-warning m-l-20 btn-rounded btn-outline waves-effect waves-light" id="zoomToFit">Zoom pour s'adapter</button>
                        <button class="btn btn-success m-l-20 btn-rounded btn-outline waves-effect waves-light" id="centerRoot">Centrer sur la racine</button></p>
                    <br><br>
                    <div id="myDiagramDiv" style="background-color: transparent; border: solid 1px black; height: 570px;">
                            <p class="text-center" style="position: center; margin-top: 185px;">
                                <i class="fa fa-spinner fa-spin" style="font-size: 10em;"></i> <span style="font-size: 1.5em;"> Chargement de l'organigramme...</span>
                            </p>
                    </div>
                    <textarea  id="mySavedModel" style="display: none"></textarea>
                </div>
            </div>
        </div>
    </div>
    <!--FIN Organigramme nouveau model GoJS-->

    <!--DEBUT zoom table-->

    <div class="row">
        <div class="col-sm-12">
            <div class="modal fade bd-example-modal-lg" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-lg" style="width: 90%">
                    <div class="modal-content">
                        <div class="white-box">
                            <div class="modal-header" style="">
                                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                                <h4 class="modal-title">Liste des Structures</h4>
                            </div>
                            {#<p class="text-muted m-b-30">Données table</p>#}
                            <div class="modal-body">
                                <div class="table-responsive">
                                    <table class="table display nowrap" id="example223" >
                                        <thead>
                                        <tr>
                                            {#                            <th>ID</th>#}
                                            <th>Nom</th>
                                            <th>Sigle</th>
                                            <th>Telephone</th>
                                            <th>Adresse</th>
                                            <th>Type</th>
                                            <th>Actions</th>
                                        </tr>
                                        </thead>

                                        <tbody>
                                        {% for structure in structures %}
                                            <tr>
                                                {#                                <td><a href="{{ path('structure_show', { 'id': structure.id }) }}">{{ structure.id }}</a></td>#}
                                                <td>{{ structure.nom }}</td>
                                                <td>{{ structure.sigle }}</td>
                                                <td>{{ structure.telephone }}</td>
                                                <td>{{ structure.adresse }}</td>
                                                <td>{{ structure.type }}</td>
                                                <td >
                                                    <button class="btn btn-info">
                                                        <a href="{{ path('structure_show', { 'id': structure.id }) }}">
                                                            Voir détail </a>
                                                    </button>

                                                    <button class="btn btn-danger">
                                                        <a href="{{ path('structure_edit', { 'id': structure.id }) }}">
                                                            Editer</a>

                                                    </button>
                                                </td>
                                            </tr>
                                        {% endfor %}
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-danger waves-effect" data-dismiss="modal">Fermer</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

        </div>
    </div>


    <!-- FIN zoom table-->

    <!-- DEBUT row zoom -->
    {#
    <div class="row" id="rowZoom" style=";">
        <div class="col-sm-12">
            <div class="white-box">
                <button id="buttonZoom2" style="font-size: 2em; border: none; display: none;"   class="btn btn-success pull-right m-l-20 btn-rounded btn-outline hidden-xs hidden-sm waves-effect waves-light">
                    <b>
                        <i id="iconzoom2" class="ti-zoom-out"></i>
                    </b>
                </button>
                <div  id="zoomorgchart" style="width: 100%;height: 100%;position: relative;">

                </div>
            </div>
        </div>
    </div>
    #}
    <!--FIN row zoom -->

    <div class="row">
        <div class="col-sm-12">
            <button id="buttonZoomTable" style="font-size: 2em; border: none;" data-toggle="modal" data-target=".bd-example-modal-lg"
                    class="btn btn-success pull-right m-l-20 btn-rounded btn-outline hidden-xs hidden-sm waves-effect waves-light">
                <b>
                    <i id="iconzoomTable" class="ti-zoom-in"></i>
                </b>
            </button>
            <div class="white-box">
                <h3 class="box-title m-b-0">Liste des Structures</h3>
                {#<p class="text-muted m-b-30">Données table</p>#}
                <div class="table-responsive">
                    <table class="table display nowrap" id="example23" >
                        <thead>
                        <tr>
{#                            <th>ID</th>#}
                            <th>Nom</th>
                            <th>Sigle</th>
{#                            <th>Telephone</th>#}
{#                            <th>Adresse</th>#}
{#                            <th>Type</th>#}
                            <th>Actions</th>
                        </tr>
                        </thead>

                        <tbody>
                        {% for structure in structures %}
                            <tr>
{#                                <td><a href="{{ path('structure_show', { 'id': structure.id }) }}">{{ structure.id }}</a></td>#}
                                <td>{{ structure.nom }}</td>
                                <td>{{ structure.sigle }}</td>
{#                                <td>{{ structure.telephone }}</td>#}
{#                                <td>{{ structure.adresse }}</td>#}
{#                                <td>{{ structure.type }}</td>#}
                                <td >
                                    <button class="btn btn-info">
                                        <a href="{{ path('structure_show', { 'id': structure.id }) }}">
                                            Voir détail </a>
                                    </button>

                                    <button class="btn btn-danger">
                                        <a href="{{ path('structure_edit', { 'id': structure.id }) }}">
                                            Editer</a>

                                    </button>
                                </td>
                            </tr>
                        {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        {#
        <div class="col-sm-5">
            <div class="white-box">
                <h3 class="box-title m-b-0">Organigramme
                    <button id="buttonZoom" style="font-size: 2em; border: none;"   class="btn btn-success pull-right m-l-20 btn-rounded btn-outline hidden-xs hidden-sm waves-effect waves-light">
                        <b>
                            <i id="iconzoom" class="ti-zoom-in"></i>
                        </b>
                    </button>
                </h3>
                <br>
                <div  id="orgchart" style="width: 100%;height: 100%;position: relative;">
                    <div id="sample">
                        <div id="myDiagramDiv" style="background-color: #34343C; border: solid 1px black; height: 570px;"></div>
                        <p><button id="zoomToFit">Zoom to Fit</button> <button id="centerRoot">Center on root</button></p>
                        <textarea  id="mySavedModel" style="width:100%; height:270px; display: none">

            </textarea>
                    </div>
                </div>
            </div>
        </div>

        #}
    </div>
    <!-- Debut modal-->
    <!-- .row -->
    <div class="row">
        <div class="col-md-4">
            <div class="">
                <!-- sample modal content -->
                <!-- /.modal -->
                <div id="responsive-modal" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" style="display: none;">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                                <h4 class="modal-title">Remplissez le formulaire: Ajout structure</h4>
                            </div>
                            <div class="modal-body">
                                {{ form_start(form, {'method': 'post', 'action': path('structure_new'), 'attr': {'data-toggle':'validator'}}) }}
                                <div class="form-group">
                                    <label for="nom" class="cursor-label">Nom</label>
                                    <div class="input-group">
                                        <div class="input-group-addon"><i class="ti-layout-accordion-merged"></i></div>
                                        {{ form_widget(form.nom,{'id':'nom'}) }}
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label for="sigle">Sigle</label>
                                    <div class="input-group">
                                        <div class="input-group-addon"><i class="ti-tag"></i></div>
                                        {{ form_widget(form.sigle, {'id':'sigle'}) }}
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label for="telephone">Telephone</label>
                                    <div class="input-group">
                                        <div class="input-group-addon"><i class="icon-phone"></i></div>
                                        {{ form_widget(form.telephone, {'id':'telephone'}) }}
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label for="adresse">Adresse</label>
                                    <div class="input-group">
                                        <div class="input-group-addon"><i class="ti-map-alt"></i></div>
                                        {{ form_widget(form.adresse, {'id':'adresse'}) }}
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label for="type">Type Structure</label>
                                    <div class="input-group">
                                        <div class="input-group-addon"><i class="ti-panel"></i></div>
                                        {{ form_widget(form.type, {'id':'type'}) }}
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label for="parent">Structure Parente</label>
                                    <div class="input-group">
                                        <div class="input-group-addon"><i class="icon-folder"></i></div>
                                        {{ form_widget(form.parent, {'id':'parent'}) }}
                                    </div>
                                </div>
                                <div class="form-group">
                                    <a href="{{ path('structure_index') }}" class="btn btn-warning btn-rounded " style="margin-right: 20px">
                                        <i class="ti-angle-left"></i> Retourne à la liste
                                    </a>
                                    <button class="btn btn-info btn-rounded "
                                            {#style="background-color:#FC9445"#}
                                            id="_submit"
                                            name="_submit"
                                            value="Envoyer"
                                            type="submit">Enregistrer <i class="ti-save"></i>
                                    </button>
                                </div>
                                {{ form_end(form) }}
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-default waves-effect" data-dismiss="modal">Close</button>
                                <button type="button" class="btn btn-danger waves-effect waves-light">Save changes</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- /.row -->
    <!-- Fin modal -->

{% endblock %}
{% block javascript %}
{% block javascripts %}
    <script src="{{ asset('template/plugins/bower_components/datatables/jquery.dataTables.min.js') }}"></script>
    <script src="{{ asset('template/plugins/bower_components/Chart.js/Chart.min.js') }}"></script>
    <script src="https://cdn.datatables.net/buttons/1.2.2/js/dataTables.buttons.min.js"></script>
    <script src="https://cdn.datatables.net/buttons/1.2.2/js/buttons.flash.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/2.5.0/jszip.min.js"></script>
    <script src="https://cdn.rawgit.com/bpampuch/pdfmake/0.1.18/build/pdfmake.min.js"></script>
    <script src="https://cdn.rawgit.com/bpampuch/pdfmake/0.1.18/build/vfs_fonts.js"></script>
    <script src="https://cdn.datatables.net/buttons/1.2.2/js/buttons.html5.min.js"></script>
    <script src="https://cdn.datatables.net/buttons/1.2.2/js/buttons.print.min.js"></script>

     <script src="{{ asset('template/js/orgchart.js') }}"></script>

    <script >
        $(document).ready(function() {
          $('#rowZoom').hide(4000);
            $('#buttonZoom').click(function() {
            $('#rowZoom').slideToggle(1000);
            $('#iconzoom').toggleClass("ti-zoom-out");
            $('#buttonZoom2').toggle();
            $('#iconzoom2').toggleClass("ti-zoom-in");
          });

            $('#buttonZoom2').click(function() {
              $('#rowZoom').slideToggle(1000);
              $('#iconzoom').toggleClass("ti-zoom-out");
              $('#buttonZoom2').toggle(1000);
            });
        });
    </script>
    <script type="text/javascript">

	var courses = {};
	var xmlhttp = new XMLHttpRequest();
	xmlhttp.open("GET", "{{ path('organigramme') }}", true);
	xmlhttp.onreadystatechange = function () {
	  if (xmlhttp.readyState == 4 && xmlhttp.status == 200){
	      $('#mySavedModel').html('{ "class": "go.TreeModel","nodeDataArray":'+xmlhttp.response+'}');
	      $('#mySavedModelTest').html('{ "class": "go.TreeModel","nodeDataArray":'+xmlhttp.response+'}');

	    structures = JSON.parse(xmlhttp.responseText);
	 	console.log(xmlhttp.response);
		var chart = new OrgChart(document.getElementById("zoomorgchart"),{
            template: "isla",
            enableSearch: true,
            lazyLoading: true,
            nodeBinding: {
                field_0: "Nom",
                field_1: "Sigle",
                field_2: "Telephone"
            },
            menu: {
            pdf: { text: "Export PDF" },
            png: { text: "Export PNG" },
            svg: { text: "Export SVG" },
            csv: { text: "Export CSV" }
        },
            nodes: structures
        });
		var chart = new OrgChart(document.getElementById("orgchart"),{
            template: "isla",
            enableSearch: true,
            lazyLoading: true,
            nodeBinding: {
                field_0: "Nom",
                field_1: "Sigle",
                field_2: "Telephone"
            },
            menu: {
            pdf: { text: "Export PDF" },
            png: { text: "Export PNG" },
            svg: { text: "Export SVG" },
            csv: { text: "Export CSV" }
        },
            nodes: structures
        });
		  }
		};
		xmlhttp.send(null);
		//console.log(xmlhttp);
</script>

    <!-- end - This is for export functionality only -->
    <script>
        $(document).ready(function() {
            $('#myTable').DataTable();
            $(document).ready(function() {
                var table = $('#example').DataTable({
                    "columnDefs": [{
                        "visible": false,
                        "targets": 2
                    }],
                    "order": [
                        [2, 'asc']
                    ],
                    "displayLength": 25,
                    "drawCallback": function(settings) {
                        var api = this.api();
                        var rows = api.rows({
                            page: 'current'
                        }).nodes();
                        var last = null;
                        api.column(2, {
                            page: 'current'
                        }).data().each(function(group, i) {
                            if (last !== group) {
                                $(rows).eq(i).before('<tr class="group"><td colspan="1">' + group + '</td></tr>');
                                last = group;
                            }
                        });
                    }
                });
                // Order by the grouping
                $('#example tbody').on('click', 'tr.group', function() {
                    var currentOrder = table.order()[0];
                    if (currentOrder[0] === 2 && currentOrder[1] === 'asc') {
                        table.order([2, 'desc']).draw();
                    } else {
                        table.order([2, 'asc']).draw();
                    }
                });
            });
        });
        $('#example23').DataTable({
            dom: 'Bfrtip',
            buttons: [
                'copy', 'csv', 'excel', 'pdf', 'print'
            ]
        });
        $('#example223').DataTable({
            dom: 'Bfrtip',
            buttons: [
                'copy', 'csv', 'excel', 'pdf', 'print'
            ]
        });
    </script>
{% endblock %}
{% endblock %}
